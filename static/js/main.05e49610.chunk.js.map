{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","state","task","handleChange","bind","handleSubmit","e","this","setState","target","name","value","preventDefault","addTodos","id","uuidv4","className","onSubmit","type","placeholder","onChange","Component","Todo","isEdit","handleRemove","toggleForm","handleUpdate","removeTodo","updatedTodo","onClick","class","TodoList","todos","remove","update","todo","filter","t","updateTask","updatedTodos","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05e49610.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './todoform.css'\r\nimport { v4 as uuidv4 } from 'uuid';\r\nexport default class TodoForm extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {task:\"\"}\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({[e.target.name]:e.target.value})\r\n    }\r\n\r\n    handleSubmit(e){\r\n        e.preventDefault();\r\n        this.props.addTodos({...this.state, id: uuidv4()})\r\n        this.setState({task:\" \"})\r\n    }   \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-form\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"task\" placeholder=\"Your task\" value={this.state.task} onChange={this.handleChange} /> \r\n                    <button>Add the task!!</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './todo.css'\r\nexport default class Todo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            isEdit:false,\r\n            task:this.props.task\r\n        }\r\n        this.handleRemove = this.handleRemove.bind(this)\r\n        this.toggleForm = this.toggleForm.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleUpdate = this.handleUpdate.bind(this)\r\n    }\r\n\r\n    handleRemove(){\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n\r\n    toggleForm(){\r\n        this.setState({isEdit : !this.state.isEdit})\r\n    }\r\n\r\n    handleChange(e){\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n\r\n    handleUpdate(e){\r\n        e.preventDefault();\r\n        this.props.updatedTodo(this.props.id, this.state.task)\r\n        this.setState({isEdit:false})\r\n    }\r\n\r\n    render() {\r\n        let result;\r\n        if(this.state.isEdit){\r\n            result = (\r\n                <div className=\"todo\">\r\n                    <form onSubmit={this.handleUpdate}>\r\n                        <input type=\"text\" name=\"task\" value={this.state.task} onChange={this.handleChange} />\r\n                        <button>Save</button>\r\n                    </form>\r\n                </div>\r\n            );\r\n        }else{\r\n            result = (\r\n                <div className=\"todo\">\r\n                    <li className=\"todo-task\">{this.props.task}</li>\r\n                    <div className=\"buttons\">\r\n                        <button onClick={this.toggleForm}><i class=\"fas fa-pen\"></i></button>\r\n                        <button onClick={this.handleRemove}><i class=\"fas fa-trash\"></i></button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './todolist.css'\r\nimport TodoForm from './TodoForm'\r\nimport Todo from './Todo'\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { \r\n            todos:[] \r\n        }\r\n        this.addTodos = this.addTodos.bind(this)\r\n        this.remove = this.remove.bind(this)\r\n        this.update = this.update.bind(this)\r\n    }\r\n    \r\n    addTodos(todo){\r\n        this.setState({\r\n            todos:[...this.state.todos,todo]\r\n        })\r\n    }\r\n\r\n    remove(id){\r\n        this.setState({\r\n            todos:[...this.state.todos.filter(t=>t.id !== id)]\r\n        })\r\n    }\r\n\r\n    update(id,updateTask){\r\n        const updatedTodos = this.state.todos.map(todo =>{\r\n            if(todo.id === id){\r\n                return{...todo,task: updateTask}\r\n            }\r\n            return todo;\r\n        })\r\n        this.setState({todos:updatedTodos})\r\n    }\r\n    \r\n    render() {\r\n        const todos = this.state.todos.map(todo =>{\r\n            return <Todo key={todo.id} task={todo.task} id={todo.id} removeTodo={this.remove} updatedTodo = {this.update}/>\r\n        })\r\n        return (\r\n            <div className=\"todoList\">\r\n                <h1>Let's get some work done!</h1>\r\n                  <TodoForm addTodos={this.addTodos} />\r\n                 <ul>{todos}</ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport TodoList from './TodoList'\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n          <TodoList />\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}